import { storagePut } from "./storage";

/**
 * Generate PDF from HTML content and save to S3
 * Using WeasyPrint via shell command for HTML-to-PDF conversion
 */
export async function generatePDF(
  htmlContent: string,
  domain: string
): Promise<string> {
  const { exec } = await import("child_process");
  const { promisify } = await import("util");
  const { writeFile, unlink } = await import("fs/promises");
  const path = await import("path");
  const os = await import("os");

  const execAsync = promisify(exec);

  // Create temporary files
  const tmpDir = os.tmpdir();
  const htmlPath = path.join(tmpDir, `${domain}-${Date.now()}.html`);
  const pdfPath = path.join(tmpDir, `${domain}-${Date.now()}.pdf`);

  try {
    // Write HTML to temp file with proper styling for PDF
    const styledHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    h1 { color: #2563eb; font-size: 28px; margin-top: 30px; }
    h2 { color: #1e40af; font-size: 22px; margin-top: 25px; }
    h3 { color: #1e3a8a; font-size: 18px; margin-top: 20px; }
    code {
      background: #f3f4f6;
      padding: 2px 6px;
      border-radius: 3px;
      font-family: monospace;
      font-size: 14px;
    }
    pre {
      background: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      padding: 15px;
      overflow-x: auto;
      font-size: 13px;
    }
    .warning {
      background: #fef3c7;
      border-left: 4px solid #f59e0b;
      padding: 12px;
      margin: 15px 0;
    }
    .success {
      background: #d1fae5;
      border-left: 4px solid #10b981;
      padding: 12px;
      margin: 15px 0;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 15px 0;
    }
    th, td {
      border: 1px solid #e5e7eb;
      padding: 10px;
      text-align: left;
    }
    th {
      background: #f3f4f6;
      font-weight: bold;
    }
    ol, ul {
      margin: 10px 0;
      padding-left: 25px;
    }
    li {
      margin: 8px 0;
    }
  </style>
</head>
<body>
  <h1>InboxPass Email Compliance Kit</h1>
  <p><strong>Domain:</strong> ${domain}</p>
  <p><strong>Generated:</strong> ${new Date().toISOString().split("T")[0]}</p>
  <hr>
  ${htmlContent}
  <hr>
  <p style="text-align: center; color: #6b7280; font-size: 12px; margin-top: 40px;">
    Generated by InboxPass | https://inboxpass.app
  </p>
</body>
</html>`;

    await writeFile(htmlPath, styledHtml, "utf-8");

    // Generate PDF using WeasyPrint
    await execAsync(`weasyprint "${htmlPath}" "${pdfPath}"`);

    // Read PDF and upload to S3
    const { readFile } = await import("fs/promises");
    const pdfBuffer = await readFile(pdfPath);

    const s3Key = `compliance-reports/${domain}-${Date.now()}.pdf`;
    const { url } = await storagePut(s3Key, pdfBuffer, "application/pdf");

    // Clean up temp files
    await unlink(htmlPath);
    await unlink(pdfPath);

    return url;
  } catch (error) {
    // Clean up on error
    try {
      await unlink(htmlPath);
      await unlink(pdfPath);
    } catch {}

    throw new Error(`PDF generation failed: ${error}`);
  }
}

